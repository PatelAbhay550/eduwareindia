---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { Image } from 'astro:assets';
import { render } from 'astro:content';
import BreadcrumbSchema from '../../components/BreadcrumbSchema.astro';

export async function getStaticPaths() {
    const questions = await getCollection('questions');
    return questions.map((question) => ({
        params: { slug: question.data.slug || question.id },
        props: question,
    }));
}

const question = Astro.props;
const { Content } = await render(question);
const { title, description, pubDate, updatedDate, heroImage, category, tags, difficulty } = question.data;

const keywords = tags || [];
if (category) keywords.push(category);
if (difficulty) keywords.push(difficulty);
const breadcrumbItems = [
  { name: 'Home', url: '/' },
  { name: 'Questions', url: '/questions' },
  { name: title, url: Astro.url.pathname }
];
---

<Layout 
	title={title} 
	description={description} 
	image={heroImage}
	keywords={keywords}
	publishedTime={pubDate.toISOString()}
	modifiedTime={updatedDate?.toISOString()}
	type="article"
>
<BreadcrumbSchema items={breadcrumbItems} />
	<div class="container-narrow">
		<article class="question-post">
			<header class="question-header">
				<nav class="breadcrumb">
					<a href="/">Home</a>
					<span>/</span>
					<a href="/questions">Questions</a>
					<span>/</span>
					<span>{title}</span>
				</nav>
				
				{heroImage && (
					<div class="hero-image">
						<Image 
							src={heroImage} 
							alt={title}
							width={800}
							height={400}
							format="webp"
							quality={85}
						/>
					</div>
				)}
				
				<div class="question-meta">
					<div class="meta-badges">
						{difficulty && (
							<span class={`difficulty-badge difficulty-${difficulty.toLowerCase()}`}>
								{difficulty}
							</span>
						)}
						{category && (
							<span class="category-badge">{category}</span>
						)}
					</div>
					<div class="meta-date">
						<FormattedDate date={pubDate} />
						{updatedDate && (
							<span class="updated">
								(Updated <FormattedDate date={updatedDate} />)
							</span>
						)}
					</div>
				</div>
				
				<h1 class="question-title">{title}</h1>
			</header>
			
			<div class="question-content">
				<Content />
			</div>
			
			{tags && tags.length > 0 && (
				<footer class="question-footer">
					<div class="tags">
						<h4>Tags:</h4>
						<div class="tag-list">
							{tags.map((tag) => (
								<span class="tag">{tag}</span>
							))}
						</div>
					</div>
				</footer>
			)}
			
			<div class="question-navigation">
				<a href="/questions" class="btn btn-secondary">
					‚Üê Back to Questions
				</a>
			</div>
		</article>
	</div>
</Layout>

<style>
	.question-post {
		padding: 2rem 0;
	}
	
	.question-header {
		margin-bottom: 3rem;
	}
	
	.breadcrumb {
		margin-bottom: 2rem;
		font-size: var(--font-size-sm);
		color: var(--text-muted);
	}
	
	.breadcrumb a {
		color: var(--primary);
		text-decoration: none;
	}
	
	.breadcrumb a:hover {
		text-decoration: underline;
	}
	
	.breadcrumb span {
		margin: 0 0.5rem;
	}
	
	.hero-image {
		margin-bottom: 2rem;
	}
	
	.hero-image img {
		width: 100%;
		height: 300px;
		object-fit: cover;
		border-radius: var(--radius-lg);
		box-shadow: var(--shadow-lg);
	}
	
	.question-meta {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 2rem;
		gap: 1rem;
	}
	
	.meta-badges {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
	}
	
	.difficulty-badge {
		padding: 0.25rem 0.75rem;
		border-radius: var(--radius-lg);
		font-size: var(--font-size-xs);
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}
	
	.difficulty-beginner {
		background: #dcfce7;
		color: #166534;
	}
	
	.difficulty-intermediate {
		background: #fef3c7;
		color: #92400e;
	}
	
	.difficulty-advanced {
		background: #fee2e2;
		color: #991b1b;
	}
	
	.category-badge {
		background: var(--primary-light);
		color: var(--primary-dark);
		padding: 0.25rem 0.75rem;
		border-radius: var(--radius-lg);
		font-size: var(--font-size-xs);
		font-weight: 500;
	}
	
	.meta-date {
		color: var(--text-muted);
		font-size: var(--font-size-sm);
		text-align: right;
	}
	
	.updated {
		font-style: italic;
		display: block;
		margin-top: 0.25rem;
	}
	
	.question-title {
		font-size: var(--font-size-4xl);
		margin-bottom: 1rem;
		line-height: 1.1;
		color: var(--text-primary);
	}
	
	.question-description {
		font-size: var(--font-size-lg);
		color: var(--text-secondary);
		margin: 0;
		line-height: 1.6;
	}
	
	.question-content {
		margin: 3rem 0;
		line-height: 1.7;
	}
	
	.question-content :global(h2),
	.question-content :global(h3),
	.question-content :global(h4) {
		margin-top: 2rem;
		margin-bottom: 1rem;
		color: var(--text-primary);
	}
	
	.question-content :global(h2) {
		font-size: var(--font-size-2xl);
		border-bottom: 2px solid var(--primary);
		padding-bottom: 0.5rem;
	}
	
	.question-content :global(p) {
		margin-bottom: 1.5rem;
		color: var(--text-secondary);
	}
	
	.question-content :global(ul),
	.question-content :global(ol) {
		margin: 1.5rem 0;
		padding-left: 2rem;
	}
	
	.question-content :global(li) {
		margin-bottom: 0.5rem;
		color: var(--text-secondary);
	}
	
	.question-content :global(code) {
		background: var(--bg-secondary);
		padding: 0.125rem 0.375rem;
		border-radius: var(--radius-sm);
		font-size: var(--font-size-sm);
		color: var(--text-primary);
	}
	
	.question-content :global(pre) {
		background: var(--gray-900);
		color: var(--gray-100);
		padding: 1.5rem;
		border-radius: var(--radius);
		overflow-x: auto;
		margin: 2rem 0;
	}
	
	.question-content :global(pre code) {
		background: none;
		padding: 0;
		color: inherit;
		font-size: var(--font-size-sm);
	}
	
	.question-content :global(blockquote) {
		border-left: 4px solid var(--primary);
		padding-left: 1.5rem;
		margin: 2rem 0;
		font-style: italic;
		color: var(--text-secondary);
		background: var(--bg-secondary);
		padding: 1rem 1rem 1rem 1.5rem;
		border-radius: 0 var(--radius) var(--radius) 0;
	}
	
	.question-footer {
		margin-top: 3rem;
		padding-top: 2rem;
		border-top: 1px solid var(--border-light);
	}
	
	.tags h4 {
		margin-bottom: 1rem;
		color: var(--text-primary);
	}
	
	.tag-list {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
	}
	
	.question-navigation {
		margin-top: 3rem;
		padding-top: 2rem;
		border-top: 1px solid var(--border-light);
	}
	
	@media (max-width: 768px) {
		.question-title {
			font-size: var(--font-size-3xl);
		}
		
		.question-meta {
			flex-direction: column;
			align-items: flex-start;
		}
		
		.meta-date {
			text-align: left;
		}
		
		.updated {
			display: inline;
			margin-top: 0;
			margin-left: 0.5rem;
		}
		
		.hero-image img {
			height: 200px;
		}
		
		.question-content :global(pre) {
			padding: 1rem;
			font-size: var(--font-size-xs);
		}
	}
</style>
