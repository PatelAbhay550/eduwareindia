---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

// Get all questions
const allQuestions = await getCollection('questions');
const questions = allQuestions.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Group by difficulty
const questionsByDifficulty = {
	'easy': questions.filter(q => q.data.difficulty === 'easy'),
	'medium': questions.filter(q => q.data.difficulty === 'medium'),
	'hard': questions.filter(q => q.data.difficulty === 'hard')
};
---

<Layout 
	title="Competitive Exams Questions & Answers by Eduware" 
	description="Practice competitive exams questions and challenges with detailed explanations. Perfect for SSC, RRB, Banking and Defence Exams."
	keywords={['Competitive exam', 'ssc cgl practice questions', 'rrb ntpc', 'eduware']}
>
	<div class="container">
		<header class="page-header">
			<h1>Competitive Exams Questions & Answers</h1>
			<p>Practice competitive exam questions and challenges with detailed explanations</p>
			<div class="stats">
				<div class="stat">
					<span class="stat-number">{questions.length}</span>
					<span class="stat-label">Total Questions</span>
				</div>
				<div class="stat">
					<span class="stat-number">{questionsByDifficulty.easy.length}</span>
					<span class="stat-label">Easy</span>
				</div>
				<div class="stat">
					<span class="stat-number">{questionsByDifficulty.medium.length}</span>
					<span class="stat-label">Medium</span>
				</div>
				<div class="stat">
					<span class="stat-number">{questionsByDifficulty.hard.length}</span>
					<span class="stat-label">Hard</span>
				</div>
			</div>
		</header>

		{questions.length > 0 ? (
			<>
				<!-- Difficulty Filter -->
				<div class="filter-tabs">
					<button class="filter-tab active" data-filter="all">All Questions</button>
					<button class="filter-tab" data-filter="easy">Easy</button>
					<button class="filter-tab" data-filter="medium">Medium</button>
					<button class="filter-tab" data-filter="hard">Hard</button>
				</div>

				<!-- Questions List -->
				<div class="questions-grid">
					{questions.map((question) => (
						<article class="question-card" data-difficulty={question.data.difficulty?.toLowerCase()}>
							<div class="question-header">
								<div class="question-meta">
									{question.data.difficulty && (
										<span class={`difficulty-badge difficulty-${question.data.difficulty.toLowerCase()}`}>
											{question.data.difficulty}
										</span>
									)}
									{question.data.category && (
										<span class="category-badge">{question.data.category}</span>
									)}
								</div>
								<FormattedDate date={question.data.pubDate} />
							</div>
							
							<h2 class="question-title">
								<a href={`/questions/${question.data.slug || question.id}/`}>{question.data.title}</a>
							</h2>
							
							<p class="question-description">{question.data.description}</p>
							
							{question.data.tags && question.data.tags.length > 0 && (
								<div class="question-tags">
									{question.data.tags.map((tag) => (
										<span class="tag">{tag}</span>
									))}
								</div>
							)}
						</article>
					))}
				</div>
			</>
		) : (
			<div class="empty-state">
				<h2>No questions yet</h2>
				<p>We're working on adding more ssc, banking, rrb practice questions. Check back soon!</p>
				<a href="/blog" class="btn btn-primary">Browse Articles Instead</a>
			</div>
		)}
	</div>
</Layout>

<style>
	.page-header {
		text-align: center;
		margin-bottom: 3rem;
	}
	
	.page-header h1 {
		font-size: var(--font-size-4xl);
		margin-bottom: 1rem;
	}
	
	.page-header p {
		font-size: var(--font-size-lg);
		color: var(--text-secondary);
		margin-bottom: 2rem;
	}
	
	.stats {
		display: flex;
		justify-content: center;
		gap: 2rem;
		flex-wrap: wrap;
	}
	
	.stat {
		text-align: center;
		padding: 1rem;
		background: var(--bg-secondary);
		border-radius: var(--radius);
		min-width: 100px;
	}
	
	.stat-number {
		display: block;
		font-size: var(--font-size-2xl);
		font-weight: 700;
		color: var(--primary);
	}
	
	.stat-label {
		font-size: var(--font-size-sm);
		color: var(--text-muted);
	}
	
	.filter-tabs {
		display: flex;
		gap: 0.5rem;
		margin-bottom: 2rem;
		flex-wrap: wrap;
		justify-content: center;
	}
	
	.filter-tab {
		padding: 0.5rem 1rem;
		border: 1px solid var(--border-medium);
		background: var(--bg-primary);
		color: var(--text-secondary);
		border-radius: var(--radius);
		cursor: pointer;
		transition: all 0.2s ease;
		font-size: var(--font-size-sm);
	}
	
	.filter-tab:hover,
	.filter-tab.active {
		background: var(--primary);
		color: white;
		border-color: var(--primary);
	}
	
	.questions-grid {
		display: grid;
		gap: 1.5rem;
	}
	
	.question-card {
		background: var(--bg-primary);
		border: 1px solid var(--border-light);
		border-radius: var(--radius-lg);
		padding: 1.5rem;
		transition: all 0.2s ease;
		box-shadow: var(--shadow-sm);
	}
	
	.question-card:hover {
		transform: translateY(-2px);
		box-shadow: var(--shadow-md);
	}
	
	.question-header {
		display: flex;
		justify-content: space-between;
		align-items: flex-start;
		margin-bottom: 1rem;
		gap: 1rem;
	}
	
	.question-meta {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
	}
	
	.difficulty-badge {
		padding: 0.25rem 0.75rem;
		border-radius: var(--radius-lg);
		font-size: var(--font-size-xs);
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}
	
	.difficulty-easy {
		background: #dcfce7;
		color: #166534;
	}
	
	.difficulty-medium {
		background: #fef3c7;
		color: #92400e;
	}
	
	.difficulty-hard {
		background: #fee2e2;
		color: #991b1b;
	}
	
	.category-badge {
		background: var(--primary-light);
		color: var(--primary-dark);
		padding: 0.25rem 0.75rem;
		border-radius: var(--radius-lg);
		font-size: var(--font-size-xs);
		font-weight: 500;
	}
	
	.question-title {
		margin: 0 0 1rem 0;
		font-size: var(--font-size-xl);
		line-height: 1.3;
	}
	
	.question-title a {
		color: var(--text-primary);
		text-decoration: none;
	}
	
	.question-title a:hover {
		color: var(--primary);
	}
	
	.question-description {
		margin: 0 0 1rem 0;
		color: var(--text-secondary);
		line-height: 1.6;
	}
	
	.question-tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
	}
	
	.empty-state {
		text-align: center;
		padding: 4rem 2rem;
		background: var(--bg-secondary);
		border-radius: var(--radius-lg);
		margin: 2rem 0;
	}
	
	.empty-state h2 {
		margin-bottom: 1rem;
		color: var(--text-primary);
	}
	
	.empty-state p {
		margin-bottom: 2rem;
		color: var(--text-secondary);
	}
	
	@media (max-width: 768px) {
		.question-header {
			flex-direction: column;
			align-items: flex-start;
		}
		
		.stats {
			gap: 1rem;
		}
		
		.filter-tabs {
			justify-content: flex-start;
		}
	}
</style>

<script>
	// Filter functionality
	document.addEventListener('DOMContentLoaded', () => {
		const filterTabs = document.querySelectorAll('.filter-tab');
		const questionCards = document.querySelectorAll('.question-card');
		
		filterTabs.forEach(tab => {
			tab.addEventListener('click', () => {
				// Update active tab
				filterTabs.forEach(t => t.classList.remove('active'));
				tab.classList.add('active');
				
				const filter = (tab as HTMLElement).dataset.filter;
				
				// Filter questions
				questionCards.forEach(card => {
					const htmlCard = card as HTMLElement;
					if (filter === 'all' || htmlCard.dataset.difficulty === filter) {
						htmlCard.style.display = 'block';
					} else {
						htmlCard.style.display = 'none';
					}
				});
			});
		});
	});
</script>
